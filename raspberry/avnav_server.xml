<?xml version="1.0" encoding="UTF-8" ?>
<AVNServer >
<!-- some basic configuration
     debugToLog controls whether any debug output will also go to the logfile
     you can change the loglevel by an HTTP request to the navurl:
     http://somehost:8080/viewer/avnav_navi.php?request=debuglevel&level=DEBUG
     maxtimeback: maximal time in seconds that we allow the system clock to go back before we delete all data
     settimecmd: command to set the systemtime (must accept time in format like date - utc - and must be able to run as pi)
     systimediff: timediff in seconds between gps timestamp and system time that we allow before we set gps time
     settimeperiod: time in seconds befor we retry setting the systemtime
-->
<AVNConfig debug="0" 
	logfile="/home/pi/avnav/data/log/avnav.log" 
	debugToLog="true"
	maxtimeback="5"
	settimecmd="/home/pi/avnav/program/raspberry/settime"
    systimediff="5"
    settimeperiod="3600"/>
<!-- the workers section -->
<Workers>
<!-- the universal feeder with gpsd
	 there is a couple of readers that are able to feed its data into this
	 feeder. As it has an input history there also could be NMEA output workers attached
	 gpsd will connect to our listener port and get all data from there, will decode the data
	 and give it back to us via its python API 
	 By setting port to the default gpsd port (2947) there is also a chance for other devices to connect 
	 to gpsd
	 The gpsd -G parameter set gpsd to bind to any - so also external connections are allowed
	 If you set useGpsd to false, you can use this feeder on system where you don't have gpsd
	 like on Windows. In this case the decoding is limited to the internal decoder.
	 -->
<AVNGpsdFeeder useGpsd="true" listenerPort="4020" port="2947" gpsdcommand="/usr/sbin/gpsd -b -n -N -G"/>



<!-- bluetooth support
	 we have a scanner that is looking for bluetooth devices
	 if one is found, it will try to connect and feed the data through the gpsd feeder
	 this avoids the need for more or less broken rfcomm stuff
	  -->

<AVNBlueToothReader maxDevices="5" >
</AVNBlueToothReader>


<!-- udev based detection of serial devices
	 we can have an autodetection here but can also add defined devices
	 to e.g. limit to some USB ports (or later for output)
	 identification of devices is based on the USB bus id
	 this heavily depends on the topology of the connected devices
	 for my setup with an USB 4 port HUB at the upper USB port
	 a device at the hubs first port will look like: 1-1.2.1:1.0 ,
	 at the second 1-1.2.2:1.0 - potentially you must check the logs
	 The below config uses a predefined device with this ID and 
	 room for 4 additional autodetect devices
	 The serial parameters are the same like for all serial readers
	 We use autobaud between 4800 and 38400 here
	 The data is feed through the gpsd feeder
	 -->
<AVNUsbSerialReader maxDevices="5" allowUnknown="true" baud="38400" minbaud="4800">
	<UsbDevice usbid="1-1.2.1:1.0" baud="38400" minbaud="4800"/>
    <!-- a serial input + output device at one particular USB port
         with this filter it will output only RMB NMEA records data
	     use a readerFilter to also apply a filter at the reader
	     Filter examples:
	     filter="$"              - all NMEA data (no AIS)
	     filter="$RMC,$RMB"      - NMEA RMB,RMC data
	     readerFilter="^!,^$RMC" - read no AIS data, no RMC, no RMB but all other NMEA data -->
    <!--<UsbDevice usbid="1-1.2:1.0" baud="4800"  type="combined" xonxoff="0" timeout="10" filter="$RMB"/> -->
    <!-- a dedicated device for only reading AIS data -->
    <!-- <UsbDevice usbid="1-1.3:1.0" baud="38400" minbaud="" filter="!"/> -->
    <!-- a dedicated reader only reading at 4800 -->
    <!-- <UsbDevice usbid="1-1.5:1.0" baud="4800" minbaud=""/> -->
    <!-- a pure serial output device
         outputting all NMEA data (but no AIS)-->
    <!-- <UsbDevice usbid="1-1.5:1.0" baud="4800" minbaud="" type="writer" filter="$"/> -->
    <!-- an usb device that should be ignored -->
    <!-- <UsbDevice usbid="1-1.2:1.0" type="ignore"/> -->
</AVNUsbSerialReader>

<!--  serial reader
      they feed their data also through GPSD
      we have autobauding from 4800 to 38400 baud
      after 20 lines without NMEA data we count the device as being dead and reopen
      This stuff is "legacy" on systems that have udev support
      because for them we use the AVNUsbSerialReader
      But if we need to interface to some none usb-serial interfaces or run on a system without udev
      those configurations can be used
      Devices like /dev/rfcommn can be used for bluetooth connections setup outside of us...
-->

<!--
<AVNSerialReader useFeeder="true" name="ttyUSB0Reader" port="/dev/ttyUSB0" baud="38400" minbaud="4800" numerrors="20"/> 
<AVNSerialReader useFeeder="true" name="ttyUSB1Reader" port="/dev/ttyUSB1" baud="38400" minbaud="4800" numerrors="20"/>
<AVNSerialReader useFeeder="true" name="ttyUSB2Reader" port="/dev/ttyUSB2" baud="38400" minbaud="4800" numerrors="20"/>
<AVNSerialReader useFeeder="true" name="ttyUSB3Reader" port="/dev/ttyUSB3" baud="38400" minbaud="4800" numerrors="20"/>
-->
<!-- a combined reader and writer on a non-USB tty device
     for a pure writer omit the combined flag -->
<!--
<AVNSerialWriter name="ttyS2" port="/dev/ttyS2" baud="4800" combined="true"/>
-->
<!-- all workers below are deprecated and make only sense in very special situations
	 they do not pipe their data through our feeder, so there is no chance for
	 any multiplexer output of data received by them
	 They could become necessary if you have a device that must directly interface with gpsd.
	 (AVNGpsd)
	  -->
<!-- gpsd readers (legacy - or for very special devices)
     4 readers for usb-serial converters, 4 for bluetooth
     by default they will check if the device is there and will start gpsd 
     once they have been able to at least receive one byte
     gpsd seems to have difficulties with autobaud - so you can set the baud here to the correct rate
     to assist...
     The timeout is a compromise - just give gpsd enough time to sync
     but kill it and release the device to allow for USB reconnects
     
     For bluetooth device we now prefer the autodiscovery daemon AVNBlueToothReader
     It will be default try to connect to any serial bluetooth device and pip its data 
     through gpsd
     If this does not work, remove the AVNBlueToothReader and add some lines here
     They currently do not autoconnect...
     
     The last one is even more special - for such device we leave everythingt to gpsd (nocheck=true)
      
<AVNGpsd device="/dev/rfcomm0" port="4001"/>
<AVNGpsd device="/dev/rfcomm1" port="4002"/>
<AVNGpsd device="/dev/rfcomm2" port="4003"/>
<AVNGpsd device="/dev/rfcomm3" port="4004"/>
<AVNGpsd device="/dev/ttyUSB0" port="4010" timeout="40" baud="38400"/>
<AVNGpsd device="/dev/ttyUSB1" port="4011" timeout="40" baud="38400"/>
<AVNGpsd device="/dev/ttyUSB2" port="4012" timeout="40" baud="38400"/>
<AVNGpsd device="/dev/ttyUSB3" port="4013" timeout="40" baud="38400"/>
 
<AVNGpsd device="tcp://76.103.90.196:9009" port="4012" timeout="40" nocheck="true"/>

-->

<!-- a reader that opens an UDP socket and listens for incoming data 
     by default it will receive data only at localhost (127.0.0.1), you can change this by settintg the host parameter e.g. to 0.0.0.0
     to listen on all interfaces
-->
<AVNUdpReader port="34667" minTime="100"></AVNUdpReader>

</Workers>

<!-- the Web server
     the port defaults to 8080, the host to "any"
     set the translation between URLs and real pathes as you need
     the navurl is the url that is used to control any nav feature
     this of course must fit to the java script part...
-->
<AVNHttpServer navurl="/viewer/avnav_navi.php" index="/viewer/avnav_viewer.html" httpPort="8080">
	<Directory urlpath="maps" path="/home/pi/avnav/data/charts"></Directory>
	<Directory urlpath="viewer" path="/usr/lib/avnav/viewer"></Directory>
	<Directory urlpath="log" path="/home/pi/avnav/data/log"></Directory>
	<Directory urlpath="tracks" path="/home/pi/avnav/data/tracks"></Directory>
	<Directory urlpath="routes" path="/home/pi/avnav/data/routes"></Directory>
	<MimeType extension=".avt" type="text/plain"></MimeType>
	<MimeType extension=".log" type="text/plain"></MimeType>
</AVNHttpServer>
<!-- the writer for track data
     tracks are written in a simple file
     each line consists of:
     timestamp,lat,lon,course,speed
     timestamp being in ISO8601 format, others in float
     interval is the minimum interval between writing trackpoints
     mindistance is the minimum distance in m before a new trackpoint is written (interval wins)
      -->
<AVNTrackWriter interval="10" mindistance="50" trackdir="/home/pi/avnav/data/tracks"/>
<!-- an TCP writer that will provide data from the feeder input to other systems
	 port - the listener port
	 filter can be either $XXX,... - the NMEA setence, in this case the first 2 characters are ignored or
	        any other value like !AIVDM. If not set or empty any data will be sent out
	 address - if set, only bind to this address, otherwise allow connections from any port
         read    - if set to true allow data input from connected devices
         minTime - when reading data wait that many milliseconds between records to avoid overloading
         readFilter - if set, only read filtered data
 -->
<AVNSocketWriter port="34567" maxDevices="5" filter="" read="true" minTime="50"/>
<!-- create chart overview files -->
<AVNChartHandler></AVNChartHandler>
<!--  routing handler 
      additional parameters:
      interval: interval in seconds for computing RMB data (default: 5)
      computeRMB: default True, set to false if you do not want RMB computation
-->
<AVNRouter routesdir="/home/pi/avnav/data/routes"></AVNRouter>
<!-- log nmea data
     will create .nmea(.gz) files in the tracks directory
     parameters:
     maxfiles: the number of logs (1 per day) that are kept - default 100
     filter: the filter for the sentences to be written, default "$RMC,$DBT,$DBP" - suitable to help openseamap by logging depth
     interval: minimal interval in seconds between sentences of the same type (default: 5)
-->
<AVNNmeaLogger></AVNNmeaLogger>
<AVNImporter importDir="/home/pi/avnav/data/import"></AVNImporter>
<AVNWpaHandler wpaSocket="/var/run/wpa_supplicant/wlan-av1"></AVNWpaHandler>

</AVNServer>
