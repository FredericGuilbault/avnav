def taskgroup = 'avnav'
buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:1.3.1'
    }
}

apply plugin: 'android'

dependencies {
    compile fileTree(dir: 'libs', include: '*.jar')
    compile 'com.android.support:appcompat-v7:21.0.3'
}

File srcBase = new File(project.rootDir, "src" + File.separator + "main")
File assetsDir = new File(project.rootDir, "assets")

android {
    lintOptions {
        abortOnError false
    }
    //original: 19
    compileSdkVersion 21
    buildToolsVersion "21.1.1"

    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = [new File(srcBase, "java")]
            resources.srcDirs = [new File(srcBase, "resources")]
            aidl.srcDirs = [srcBase]
            renderscript.srcDirs = [srcBase]
            res.srcDirs = ['res']
            assets.srcDirs = [assetsDir]
        }

        // Move the tests to tests/java, tests/res, etc...
        instrumentTest.setRoot('tests')

        // Move the build types to build-types/<type>
        // For instance, build-types/debug/java, build-types/debug/AndroidManifest.xml, ...
        // This moves them out of them default location under src/<type>/... which would
        // conflict with src/ being used by the main source set.
        // Adding new build types or product flavors should be accompanied
        // by a similar customization.
        debug.setRoot('build-types/debug')
        release.setRoot('build-types/release')
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }
    signingConfigs {
        if (System.getenv("ANDROID_KEYSTORE") != null) {
            release {
                storeFile file(System.getenv("ANDROID_KEYSTORE"))
                storePassword System.getenv("ANDROID_KEYPASS")
                keyAlias System.getenv("ANDROID_KEYALIAS")
                keyPassword System.getenv("ANDROID_KEYPASS")
            }
        }
    }
    //see http://stackoverflow.com/questions/18332474/how-to-set-versionname-in-apk-filename-using-gradle
    buildTypes {
        release {
            if (System.getenv("ANDROID_KEYSTORE") != null) {
                signingConfig signingConfigs.release
            }
            applicationVariants.all { variant ->
                println "Variant: " + variant.getName()
                def manifestParser = new com.android.builder.core.DefaultManifestParser()
                def version = manifestParser.getVersionName(android.sourceSets.main.manifest.srcFile)
                variant.outputs.each { output ->
                    if (!output.outputFile.name.matches('.*debug.*'))
                        output.outputFile = new File(output.outputFile.parent, output.outputFile.name.replace("android-release.apk", "avNav-" + version + ".apk"))
                }
            }
        }
    }
}
File viewerDir = new File(project.rootDir, ".." + File.separator + "viewer")
File libraryDir = new File(project.rootDir, ".." + File.separator + "libraries")
task buildViewer(type: org.gradle.api.tasks.Exec) {
    group = taskgroup
    if (System.properties['os.name'].toLowerCase().contains('windows')) {
        commandLine 'cmd', '/c', new File(viewerDir, "build" + File.separator + "build.py")
    } else {
        commandLine new File(viewerDir, "build" + File.separator + "build.py")
    }
}

task copyToAssetsViewer(type: org.gradle.api.tasks.Copy) {
    group = taskgroup
    from(viewerDir) {
        include 'loader.js'
        include 'avnav_viewer.html'
        include 'avnav_viewer.less'
        include 'images' + File.separator + "*.png"
    }
    into new File(assetsDir, "viewer")
}
copyToAssetsViewer.dependsOn(buildViewer)




task copyToAssetsLib(type: org.gradle.api.tasks.Copy) {
    group = taskgroup
    from(libraryDir) {
        include 'rangeslider' + File.separator + '*'
        include 'movable-type' + File.separator + '*'
        include 'ol311' + File.separator + 'ol.js'
        include 'less' + File.separator + 'less-1.7.3.min.js'
        include 'jscolor' + File.separator + '*'
        include 'jquery' + File.separator + '*.js'
    }
    into new File(assetsDir, "libraries")
}

task copyToAssets(type: org.gradle.api.Task) {
    group = taskgroup
    doFirst {
        println "copy to assets done"
    }
}
copyToAssets.dependsOn(copyToAssetsViewer, copyToAssetsLib)
task copyDebugViewer(type: org.gradle.api.tasks.Copy) {
    group = taskgroup
    from(viewerDir) {
        include 'avnav_combine.js'
        rename 'avnav_combine.js', 'avnav_min.js'
    }
    into new File(assetsDir, "viewer")
}
copyDebugViewer.dependsOn(copyToAssets)


task copyReleaseViewer(type: org.gradle.api.tasks.Copy) {
    group = taskgroup
    from(viewerDir) {
        include 'avnav_min.js'
    }
    into new File(assetsDir, "viewer")
}
copyReleaseViewer.dependsOn(copyToAssets)
afterEvaluate {
    generateDebugAssets.dependsOn(copyDebugViewer)
    generateReleaseAssets.dependsOn(copyReleaseViewer)
}


clean.delete.add "assets/viewer"




