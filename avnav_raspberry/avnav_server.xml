<?xml version="1.0" encoding="UTF-8" ?>
<AVNServer >
<!-- some basic configuration
     debugToLog controls whether any debug output will also go to the logfile
     you can change the loglevel by an HTTP request to the navurl:
     http://somehost:8080/viewer/avnav_navi.php?request=debuglevel&level=DEBUG
-->
<AVNConfig debug="0" logfile="/home/pi/avnav/log/avnav.log" debugToLog="true"/>
<!-- the workers section -->
<Workers>
<!-- reader for 4 usb/serial converters and 4 bluetooth devices
     currently the internal reader needs a fixed setting (defaults to 4800 baud)
     and can only handle a limite set of GPS data (no AIS)
<AVNSerialReader name="rfcomm0Reader" port="/dev/rfcomm0"/>
<AVNSerialReader name="rfcomm1Reader" port="/dev/rfcomm1"/>
<AVNSerialReader name="rfcomm2Reader" port="/dev/rfcomm2"/>
<AVNSerialReader name="rfcomm3Reader" port="/dev/rfcomm3"/>
<AVNSerialReader name="rfcomm4Reader" port="/dev/rfcomm4"/>
<AVNSerialReader name="ttyUSB0Reader" port="/dev/ttyUSB0"/>
<AVNSerialReader name="ttyUSB1Reader" port="/dev/ttyUSB1"/>
<AVNSerialReader name="ttyUSB2Reader" port="/dev/ttyUSB2"/>
<AVNSerialReader name="ttyUSB3Reader" port="/dev/ttyUSB3"/>
<AVNSerialReader name="ttyUSB4Reader" port="/dev/ttyUSB4"/>
-->
<!-- gpsd readers (legacy - or for very special devices)
     4 readers for usb-serial converters, 4 for bluetooth
     by default they will check if the device is there and will start gpsd 
     once they have been able to at least receive one byte
     gpsd seems to have difficulties with autobaud - so you can set the baud here to the correct rate
     to assist...
     The timeout is a compromise - just give gpsd enough time to sync
     but kill it and release the device to allow for USB reconnects
     
     For bluetooth device we now prefer the autodiscovery daemon AVNBlueToothReader
     It will be default try to connect to any serial bluetooth device and pip its data 
     through gpsd
     If this does not work, remove the AVNBlueToothReader and add some lines here
     They currently do not autoconnect...
      
<AVNGpsd device="/dev/rfcomm0" port="4001"/>
<AVNGpsd device="/dev/rfcomm1" port="4002"/>
<AVNGpsd device="/dev/rfcomm2" port="4003"/>
<AVNGpsd device="/dev/rfcomm3" port="4004"/>
<AVNGpsd device="/dev/ttyUSB0" port="4010" timeout="40" baud="38400"/>
<AVNGpsd device="/dev/ttyUSB1" port="4011" timeout="40" baud="38400"/>
<AVNGpsd device="/dev/ttyUSB2" port="4012" timeout="40" baud="38400"/>
<AVNGpsd device="/dev/ttyUSB3" port="4013" timeout="40" baud="38400"/>

-->
<!-- the universal feeder with gpsd
	 there is a couple of readers that are able to feed its data into this
	 feeder. As it has an input history there also could be NMEA output workers attached
	 gpsd will connect to our listener port and get all data fro there, will decode the data
	 and give it back to us via its python API 
	 By setting port to the default gpsd port there is alos a chance for other devices to connect 
	 to gpsd-->
<AVNGpsdFeeder useGpsd="true" listenerPort="4020" port="2947" gpsdcommand="/usr/sbin/gpsd -b -n -N -G"/>


<!-- a reader for real ais data... 
<AVNGpsd device="tcp://76.103.90.196:9009" port="4012" timeout="40" nocheck="true"/>
-->

<!-- bluetooth support
	 we have a scanner that is looking for bluetooth devices
	 if one is found, it will try to connect and feed the data through the gpsd feeder
	  -->
 
<AVNBlueToothReader maxDevices="5" >
</AVNBlueToothReader>

<!--  serial reader for USB attached serial devices
      the feed their data also through GPSD
       -->
<!-- <AVNSerialReader useFeeder="true" name="ttyUSB0Reader" port="/dev/ttyUSB0"/> 
<AVNSerialReader useFeeder="true" name="ttyUSB1Reader" port="/dev/ttyUSB1"/>
<AVNSerialReader useFeeder="true" name="ttyUSB2Reader" port="/dev/ttyUSB2"/>-->
<AVNSerialReader useFeeder="true" name="ttyUSB3Reader" port="/dev/ttyUSB3"/>

</Workers>

<!-- the Web server
     the port defaults to 8080, the host to "any"
     set the translation between URLs and real pathes as you need
     the navurl is the url that is used to control any nav feature
     this of course must fit to the java script part...
-->
<AVNHttpServer navurl="/viewer/avnav_navi.php">
	<Directory urlpath="maps" path="/home/pi/avnav/tiles"></Directory>
	<Directory urlpath="viewer" path="/home/pi/avnav/viewer"></Directory>
	<Directory urlpath="libraries" path="/home/pi/avnav/libraries"></Directory>
	<Directory urlpath="log" path="/home/pi/avnav/log"></Directory>
	<Directory urlpath="tracks" path="/home/pi/avnav/tracks"></Directory>
	<MimeType extension=".avt" type="text/plain"></MimeType>
	<MimeType extension=".log" type="text/plain"></MimeType>
</AVNHttpServer>
<!-- the writer for track data
     tracks are written in a simple file
     each line consists of:
     timestamp,lat,lon,course,speed
     timestamp being in ISO8601 format, others in float
     interval is the minimum interval between writing trackpoints
     distance is the minimum distance in m before a new trackpoint is written (interval wins)
      -->
<AVNTrackWriter interval="10" distance="30" trackdir="/home/pi/avnav/tracks"/>
</AVNServer>
