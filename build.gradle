import java.text.SimpleDateFormat

buildscript{
	repositories{
		mavenCentral()
	}
    dependencies{
        classpath localGroovy()
        classpath 'com.netflix.nebula:gradle-ospackage-plugin:3.6.1'
    }
}

repositories{
	mavenCentral()
}

boolean onWindows=false
if (System.properties['os.name'].toLowerCase().contains('windows')) {
    println "running on Windows"
    onWindows = true
}

description="NMEA multiplexer and Browser based navigation"
apply plugin: 'java'

apply plugin: 'nebula.ospackage-base'



def taskgroup="avnav"
['build','clean'].each { tt ->
    tasks.create(name:"${tt}Android",type: GradleBuild) {
        group taskgroup
        setDir("android")
        setTasks([tt])
    }
}
clean.dependsOn cleanAndroid
build.dependsOn buildAndroid

["debug","release","clean"].each { tt ->
    def vt=tasks.create(name: "${tt}Viewer",type: GradleBuild) { GradleBuild b->
        b.group taskgroup
        b.setDir("viewer")
        b.setTasks([tt])

    }
    if (tt == "clean"){
        clean.dependsOn vt
    }
    else{
        build.dependsOn vt
    }
}

def guiVersionFile=new File(project.buildDir,"avnav_gui_version.py")
def serverVersionFile=new File(project.buildDir,"avnav_server_version.py")


task pkgVersion<<{
    if (! project.hasProperty('packageVersion')){
        SimpleDateFormat f=new SimpleDateFormat('YYYYMMdd')
        ospackage.version f.format(new Date())
    }
    else{
        ospackage.version=packageVersion
    }
    println "package version $ospackage.version"
    [guiVersionFile,serverVersionFile].each{
        if (! it.getParentFile().isDirectory()) it.getParentFile().mkdirs()
        it.withWriter {wr->
            wr.println("AVNAV_VERSION=\"$ospackage.version\"")
        }
    }
}

task windowsBuild(type: org.gradle.api.tasks.GradleBuild){
    dir="windows"
    tasks=["release"]
    doFirst{
        assert onWindows,"we cannot run the windowsBuild task ase we are not on windows"
    }
}
task noWindowsBuild<<{
    println "###unable to build the windows installer as we are not running on windows###"
}
def emptyBase=new File(project.buildDir,"empty")
ospackage {
    //release='3'
    os = LINUX // only applied to RPM
    packageGroup='misc'
    packageName='avnav'
    requires 'gpsd'
    requires 'python-gps'
    requires 'bluetooth'
    requires 'python-bluez'
    requires 'python-pyudev'
    requires 'python-serial'
    requires 'python-gdal'
    requires 'python-imaging'
    user='root'
    into ('/usr/lib/avnav') {
        from('viewer/build/release') {
            into 'viewer'
        }
        from('server') {
            include "*.py"
            into "server"
            fileMode 0755
        }
        from('chartconvert') {
            include "*.py"
            into 'chartconvert'
            fileMode 0755
        }
        from('chartconvert/tiler_tools') {
            include "*html"
            include "*csv"
            into 'chartconvert/tiler_tools'
            fileMode 0644
        }
        from('chartconvert/tiler_tools') {
            include "*.py"
            into 'chartconvert/tiler_tools'
            fileMode 0755
        }
        from('libraries') {
            include 'gpxpy*/**'
            into 'libraries'
        }
        from('linux') {
            include "avnav_template.xml"
        }
        from('linux') {
            include "avnav"
            fileMode 0755
        }
        from('linux') {
            include "avnav_gui*"
            fileMode 0755
            into "gui"
        }
        from(guiVersionFile.getParentFile()){
            into "gui"
            include guiVersionFile.getName()
        }
        from(serverVersionFile.getParentFile()){
            into "server"
            include serverVersionFile.getName()
        }
    }
    into ('/usr/lib/systemd/system'){
        from('linux'){
            include 'avnav.service'
        }
    }
    postInstall file('linux/postinstall')

    link('/usr/bin/avnav','/usr/lib/avnav/avnav')
}


task raspiDeb(type: GradleBuild){
    group taskgroup
    buildFile="raspi.gradle"
    tasks=['raspiDeb']
}



task releaseRpm(type: Rpm) {
    group taskgroup
    arch = I386
    dependsOn pkgVersion
}

task releaseDeb(type: Deb) {
    group taskgroup
    dependsOn 'releaseViewer',pkgVersion
}

task release{
    group taskgroup
    description "build all avnav release stuff"
    doLast {
        println "all release packages have been build"
    }
    dependsOn releaseRpm, releaseDeb,raspiDeb,buildAndroid
    if (onWindows){
        dependsOn windowsBuild
    }
    else{
        dependsOn noWindowsBuild
    }
}

afterEvaluate{
    tasks.withType(org.gradle.api.tasks.GradleBuild.class){GradleBuild b->
        b.dependsOn pkgVersion
        b.doFirst{
            startParameter.projectProperties.put('packageVersion',ospackage.version)
        }
    }
}


