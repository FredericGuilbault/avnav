import java.text.SimpleDateFormat
import org.apache.commons.net.ftp.*
buildscript{
	repositories{
		mavenCentral()
	}
    dependencies{
        classpath localGroovy()
        classpath 'com.netflix.nebula:gradle-ospackage-plugin:3.6.1'
        classpath 'commons-net:commons-net:3.3'
    }
}

repositories{
	mavenCentral()
}



if (! project.hasProperty('packageVersion')){
    SimpleDateFormat f=new SimpleDateFormat('YYYYMMdd')
    project.ext.avnavVersion=f.format(new Date())
}
else{
    project.ext.avnavVersion=project.packageVersion
}

boolean onWindows=false
if (System.properties['os.name'].toLowerCase().contains('windows')) {
    println "running on Windows"
    onWindows = true
}

description="NMEA multiplexer and Browser based navigation"
apply plugin: 'java'

apply plugin: 'nebula.ospackage-base'



def taskgroup="avnav"
['build','clean'].each { tt ->
    tasks.create(name:"${tt}Android",type: GradleBuild) {
        group taskgroup
        setDir("android")
        setTasks([tt])
    }
}
clean.dependsOn cleanAndroid
build.dependsOn buildAndroid

["debug","release","clean"].each { tt ->
    def vt=tasks.create(name: "${tt}Viewer",type: GradleBuild) { GradleBuild b->
        b.group taskgroup
        b.setDir("viewer")
        b.setTasks([tt])

    }
    if (tt == "clean"){
        clean.dependsOn vt
    }
    else{
        build.dependsOn vt
    }
}

def guiVersionFile=new File(project.buildDir,"avnav_gui_version.py")
def serverVersionFile=new File(project.buildDir,"avnav_server_version.py")


task pkgVersion<<{
    ospackage.version=project.avnavVersion
    println "package version $ospackage.version"
    [guiVersionFile,serverVersionFile].each{
        if (! it.getParentFile().isDirectory()) it.getParentFile().mkdirs()
        it.withWriter {wr->
            wr.println("AVNAV_VERSION=\"$ospackage.version\"")
        }
    }
}

task windowsBuild(type: org.gradle.api.tasks.GradleBuild){
    dir="windows"
    tasks=["release"]
    doFirst{
        assert onWindows,"we cannot run the windowsBuild task as we are not on windows"
    }
}
task noWindowsBuild<<{
    println "###unable to build the windows installer as we are not running on windows###"
}
def emptyBase=new File(project.buildDir,"empty")
ospackage {
    //release='3'
    os = LINUX // only applied to RPM
    packageGroup='misc'
    packageName='avnav'
    requires 'gpsd'
    requires 'python-gps'
    requires 'bluetooth'
    requires 'python-bluez'
    requires 'python-pyudev'
    requires 'python-serial'
    requires 'python-gdal'
    requires 'python-imaging'
    user='root'
    into ('/usr/lib/avnav') {
        from('viewer/build/release') {
            into 'viewer'
        }
        from('server') {
            include "*.py"
            into "server"
            fileMode 0755
        }
        from('chartconvert') {
            include "*.py"
            into 'chartconvert'
            fileMode 0755
        }
        from('chartconvert/tiler_tools') {
            include "*html"
            include "*csv"
            into 'chartconvert/tiler_tools'
            fileMode 0644
        }
        from('chartconvert/tiler_tools') {
            include "*.py"
            into 'chartconvert/tiler_tools'
            fileMode 0755
        }
        from('libraries') {
            include 'gpxpy*/**'
            into 'libraries'
        }
        from('linux') {
            include "avnav_template.xml"
        }
        from('linux') {
            include "avnav"
            fileMode 0755
        }
        from('linux') {
            include "avnav_gui*"
            fileMode 0755
            into "gui"
        }
        from(guiVersionFile.getParentFile()){
            into "gui"
            include guiVersionFile.getName()
        }
        from(serverVersionFile.getParentFile()){
            into "server"
            include serverVersionFile.getName()
        }
    }
    into ('/usr/lib/systemd/system'){
        from('linux'){
            include 'avnav.service'
        }
    }
    postInstall file('linux/postinstall')

    link('/usr/bin/avnav','/usr/lib/avnav/avnav')
}


task raspiDeb(type: GradleBuild){
    group taskgroup
    buildFile="raspi.gradle"
    tasks=['raspiDeb']
}



task releaseRpm(type: Rpm) {
    group taskgroup
    arch = I386
    dependsOn pkgVersion
}

task releaseDeb(type: Deb) {
    group taskgroup
    dependsOn 'releaseViewer',pkgVersion
}

task release{
    group taskgroup
    description "build all avnav release stuff"
    doLast {
        println "all release packages have been build"
    }
    dependsOn releaseRpm, releaseDeb,raspiDeb,buildAndroid
    if (onWindows){
        dependsOn windowsBuild
    }
    else{
        dependsOn noWindowsBuild
    }
}

class UploadTask extends DefaultTask{
    private void checkReply(FTPClient ftp){
        if (! FTPReply.isPositiveCompletion(ftp.getReplyCode())){
            throw Exception("negative ftp reply: "+ftp.getReplyString())
        }
    }
    def server="www.wellenvogel.net"
    def baseDir="/www/software/avnav/downloads"
    @InputFile
    File inputFile
    @TaskAction
    public void exec(){
        assert inputFile!=null,"missing task parameter inputFile"
        assert inputFile.exists(),"input file $inputFile does not exist"
        assert project.hasProperty("avnavVersion")
        logger.info("uploading to $server")
        def ftp=new FTPClient();
        def user=System.getenv("AVNAV_REPO_USER")
        assert user!=null,"missing environment variable AVNAV_REPO_USER"
        def passwd=System.getenv("AVNAV_REPO_PASSWD")
        assert passwd !=null,"missing environemt variable AVNAV_REPO_PASSWD"
        ftp.connect(server)
        ftp.login(user,passwd)
        checkReply(ftp)
        def dir=baseDir+"/"+project.avnavVersion
        boolean exists=ftp.changeWorkingDirectory(dir)
        if (! exists){
            logger.lifecycle("creating directory $dir")
            assert ftp.changeWorkingDirectory(baseDir)
            assert ftp.makeDirectory(project.avnavVersion)
            assert ftp.changeWorkingDirectory(dir)
        }
        FileInputStream is=new FileInputStream(inputFile)
        //ftp.setControlKeepAliveTimeout(30)
        logger.lifecycle("uploading $inputFile to $dir")
        try {
            ftp.storeFile(inputFile.getName(), is)
        }catch (Exception e){
            logger.error("Exception while uploading: ",e)
            e.printStackTrace()
            throw e
        }
        logger.lifecycle("upload of $inputFile complete")
        checkReply(ftp)
        ftp.disconnect()
    }
}

task uploadDeb(type: UploadTask){
    inputFile=file("$buildDir/distributions/avnav_${project.avnavVersion}_all.deb")
    dependsOn releaseDeb
}
task uploadRaspi(type: UploadTask){
    inputFile=file("$buildDir/distributions/avnav-raspi_${project.avnavVersion}_all.deb")
    dependsOn raspiDeb
}
task uploadRpm(type: UploadTask){
    inputFile=file("$buildDir/distributions/avnav-${project.avnavVersion}.i386.rpm")
    dependsOn releaseRpm
}
task uploadWindows(type: UploadTask){
    def windowsVersion=project.avnavVersion.replaceAll(/(....)(..)(..)/,'$1-$2-$3').replaceAll(/-0([^-])/,'-$1')
    inputFile=file("windows/build/AvNavSetup-${windowsVersion}-0.exe")
    dependsOn windowsBuild
}
task uploadAndroid(type: UploadTask){
    //TODO: version handling for android
    inputFile=file("android/build/outputs/apk/avNav-1.0.0.apk")
    dependsOn buildAndroid
}


task upload{
    doLast {
        println "###uploaded artifacts to version dir $project.avnavVersion###"
    }
    dependsOn uploadDeb,uploadRaspi,uploadRpm,uploadAndroid
    if (onWindows){
        dependsOn uploadWindows
    }
}


afterEvaluate{
    tasks.withType(org.gradle.api.tasks.GradleBuild.class){GradleBuild b->
        b.dependsOn pkgVersion
        b.doFirst{
            startParameter.projectProperties.put('packageVersion',project.avnavVersion)
        }
    }
}


